"""
Author: Simon Holzinger
Affiliation: AG LÃ¤ngst, University of Regensburg
Aim: Analysis of Plasmodium falciparum MNase-Seq Data
Date: 2022-12-20
Run: snakemake --use-conda Snakefile
Workflow:
    Preprocessing:
        - FastQC of raw reads
        - trimming of reads with Skewer
        - FastQC of trimmed reads
    Mapping:
        - mapping with bowtie2
        - filtering of fragments with deeptools
    Nucleosome Calling:
        - nucleosome calling with DANPOS3

"""

configfile: "config.yaml"

SAMPLE = expand(config["samples"])

outSet = set()
for samples in SAMPLE:
    spltS = str.split(samples,"_")
    spltS = spltS[0] + "_" + spltS[1]
    outSet.add(spltS)
TREATMENT = list(outSet)


####################
# Main Rule
####################
rule all:
  input:
    expand("2_pipeline/00_qc/preprocessing/raw_fastqc/{sample}_{num}_fastqc.html", sample = config["samples"], num = [1,2]),
    "2_pipeline/00_qc/mapping/multiqc/multiqc_report.html",
    "2_pipeline/00_qc/filtered/multiqc/multiqc_report.html",
    expand("2_pipeline/03_alignment_filtered/bam/{sample}.s.bam", sample = config["samples"]),
    expand("2_pipeline/03_alignment_filtered/bam/{sample}.s.bam.bai", sample = config["samples"]),
    "2_pipeline/04_differential_nucleosome_positioning/results/adjustedFDR/" + config["treat-name"] + "-" + config["control-name"] + ".positions.FDR_corrected.xls",


####################
# Preprocessing QC
####################
rule raw_fastqc:
    input:
        lambda wildcards: f"{config['samples'][wildcards.sample]}_{wildcards.num}.fastq.gz"
    output:
        html="2_pipeline/00_qc/preprocessing/raw_fastqc/{sample}_{num}_fastqc.html",
        zip="2_pipeline/00_qc/preprocessing/raw_fastqc/{sample}_{num}_fastqc.zip"
    wrapper:
        "0.35.0/bio/fastqc"

####################
# Trim Reads
####################
rule trim_reads:
    input:
        r1=lambda wildcards: f"{config['samples'][wildcards.sample]}_1.fastq.gz",
        r2=lambda wildcards: f"{config['samples'][wildcards.sample]}_2.fastq.gz",
    output:
        temp("2_pipeline/01_trimmed_reads/{sample}-trimmed-pair1.fastq"),
        temp("2_pipeline/01_trimmed_reads/{sample}-trimmed-pair2.fastq")
    log:
        "2_pipeline/00_logs/skewer/{sample}.log"
    params:
        outDir="2_pipeline/01_trimmed_reads/{sample}"
    threads: 1
    conda:
        "4_envs/skewer.yaml"
    shell:
        "skewer -x AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -y AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT {input.r1} {input.r2} -o {params.outDir}"

####################
# Bowtie Index
####################
rule index_bowtie2:
    input:
        config["reference-genome"]
    output:
        "2_pipeline/00_index/bowtie2/reference.1.bt2",
        "2_pipeline/00_index/bowtie2/reference.2.bt2",
        "2_pipeline/00_index/bowtie2/reference.3.bt2",
        "2_pipeline/00_index/bowtie2/reference.4.bt2",
        "2_pipeline/00_index/bowtie2/reference.rev.1.bt2",
        "2_pipeline/00_index/bowtie2/reference.rev.2.bt2"
    params:
        seed=config["rndSeed"],
        basename="2_pipeline/00_index/bowtie2/reference"
    threads: 24
    log:
        "2_pipeline/00_logs/bowtie2_index/reference.log"
    conda:
        "4_envs/bowtie2.yaml"
    shell:
        "bowtie2-build --seed {params.seed} --threads {threads} {input} {params.basename} &> {log}"

####################
# Alignment Bowtie
####################
rule alignment_bowtie2:
    input:
        r1="2_pipeline/01_trimmed_reads/{sample}-trimmed-pair1.fastq",
        r2="2_pipeline/01_trimmed_reads/{sample}-trimmed-pair2.fastq",
        index_1="2_pipeline/00_index/bowtie2/reference.1.bt2",
        index_2="2_pipeline/00_index/bowtie2/reference.2.bt2",
        index_3="2_pipeline/00_index/bowtie2/reference.3.bt2",
        index_4="2_pipeline/00_index/bowtie2/reference.4.bt2",
        index_rev1="2_pipeline/00_index/bowtie2/reference.rev.1.bt2",
        index_rev2="2_pipeline/00_index/bowtie2/reference.rev.2.bt2"
    priority: 1
    output:
        temp("2_pipeline/tmp/{sample}.sam")
    params:
        index=expand("2_pipeline/00_index/bowtie2/reference"),
        seed=config["rndSeed"],
        extra="--very-sensitive --no-discordant "
                "--no-mixed "
                "--no-unal "
    threads: 12
    log:
        "2_pipeline/00_logs/bowtie2/{sample}.log"
    benchmark:
        "2_pipeline/00_benchmarks/bowtie2/{sample}.bowtie2.benchmark.txt"
    conda:
        "4_envs/bowtie2.yaml"
    shell:
        "bowtie2 -x {params.index} -1 {input.r1} -2 {input.r2} -S {output} -p {threads} {params.extra} &> {log}"

####################
# BAM conversion, sorting and indexing
####################
rule sam_to_bam:
    input:
        "2_pipeline/tmp/{sample}.sam"
    output:
        temp("2_pipeline/02_alignment/unsort/{sample}.bam")
    priority: 2
    conda:
        "4_envs/samtools.yaml"
    threads: 8
    shell:
        "samtools view -b -@ {threads} -o {output} {input}"

rule sort_bam:
    input:
        "2_pipeline/02_alignment/unsort/{sample}.bam"
    output:
        "2_pipeline/02_alignment/sort/{sample}.s.bam"
    priority: 3
    conda:
        "4_envs/samtools.yaml"
    threads: 8
    shell:
        "samtools sort -m 1G -@ {threads} -o {output} {input}"

rule index_bam:
    input:
        "2_pipeline/02_alignment/sort/{sample}.s.bam"
    output:
        "2_pipeline/02_alignment/sort/{sample}.s.bam.bai"
    priority: 3
    conda:
        "4_envs/samtools.yaml"
    threads: 8
    shell:
        "samtools index {input}"

####################
# Mapping QC
####################
rule qualimap:
    input:
        "2_pipeline/02_alignment/sort/{sample}.s.bam"
    output:
        "2_pipeline/00_qc/mapping/qualimap/{sample}_qualimap/qualimapReport.html"
    params:
        outdir="2_pipeline/00_qc/mapping/qualimap/{sample}_qualimap/",
        extra="--java-mem-size=4G"
    conda:
        "4_envs/qualimap.yaml"
    log:
        "2_pipeline/00_logs/qualimap/{sample}.log"
    shell:
        "qualimap bamqc -bam {input} {params.extra} -outdir {params.outdir} -c > {log}"

rule multiqc_mapping:
    input:
        expand("2_pipeline/00_qc/mapping/qualimap/{sample}_qualimap/qualimapReport.html", sample = config['samples'])
    output:
        "2_pipeline/00_qc/mapping/multiqc/multiqc_report.html"
    params:
        qualimap_dir="2_pipeline/00_qc/mapping/qualimap/",
        outdir="2_pipeline/00_qc/mapping/multiqc/",
    conda:
        "4_envs/multiqc.yaml"
    shell:
        "multiqc -o {params.outdir} {params.qualimap_dir} -f "


####################
# BAM Filtering
####################
rule deeptools_alignmentSieve:
    input:
        bam="2_pipeline/02_alignment/sort/{sample}.s.bam",
        bai="2_pipeline/02_alignment/sort/{sample}.s.bam.bai"
    output:
        bam=temp("2_pipeline/03_alignment_filtered/unsorted/{sample}.bam"),
        stats="2_pipeline/00_qc/filtered/deeptools_alignmentSieve/{sample}.txt"
    params:
        extra="--minFragmentLength 75 "
            "--maxFragmentLength 175 "
            "--samFlagInclude 2 " # only output reads mapped in proper pair
            "--minMappingQuality 20 " # Filter for min mapping quality of 20
    threads: 8
    log: "2_pipeline/00_logs/deeptools_alignmentSieve/{sample}.log"
    conda:
        "4_envs/deeptools.yaml"
    shell:
        "alignmentSieve -b {input.bam} {params.extra} -p {threads} -o {output.bam} --filterMetrics {output.stats} > {log}"

rule sort_filtered_bam:
    input:
        "2_pipeline/03_alignment_filtered/unsorted/{sample}.bam"
    output:
        "2_pipeline/03_alignment_filtered/bam/{sample}.s.bam"
    threads: 8
    shell:
        "samtools sort -m 1G -@ {threads} -o {output} {input}"

rule index_filtered_bam:
    input:
        "2_pipeline/03_alignment_filtered/bam/{sample}.s.bam"
    output:
        "2_pipeline/03_alignment_filtered/bam/{sample}.s.bam.bai"
    shell:
        "samtools index {input}"

####################
# Filtered QC
####################
rule qualimap_filtered:
    input:
        "2_pipeline/03_alignment_filtered/bam/{sample}.s.bam"
    output:
        "2_pipeline/00_qc/filtered/qualimap/{sample}_qualimap/qualimapReport.html"
    params:
        annotationFile=config["reference-annotation"],
        outdir="2_pipeline/00_qc/filtered/qualimap/{sample}_qualimap/",
        extra="--java-mem-size=4G"
    conda:
        "4_envs/qualimap.yaml"
    log:
        "2_pipeline/00_logs/qualimap_filtered/{sample}.log"
    shell:
        "qualimap bamqc -bam {input} {params.extra} -gff {params.annotationFile} -outdir {params.outdir} -c > {log}"

rule multiqc_filtered:
    input:
        expand("2_pipeline/00_qc/filtered/qualimap/{sample}_qualimap/qualimapReport.html", sample = config['samples'])
    output:
        "2_pipeline/00_qc/filtered/multiqc/multiqc_report.html"
    params:
        qualimap_dir="2_pipeline/00_qc/filtered/qualimap/",
        outdir="2_pipeline/00_qc/filtered/multiqc/",
    conda:
        "4_envs/multiqc.yaml"
    shell:
        "multiqc -o {params.outdir} {params.qualimap_dir} -f "


######################
# Nucleosome Positioning with DANPOS
#
# by Simon Holzinger
####################
rule danpos_diffNuc_prep:
    input:
        bam="2_pipeline/03_alignment_filtered/bam/{sample}.s.bam",
        bai="2_pipeline/03_alignment_filtered/bam/{sample}.s.bam.bai"
    output:
        temp("2_pipeline/04_differential_nucleosome_positioning/{trt}/{sample}.bam")
    params:
        oDir = "2_pipeline/04_differential_nucleosome_positioning/",
        TREAT = TREATMENT
    priority: 2
    run:
        for trtmnts in params.TREAT:
            shellcmd = "mkdir " + params.oDir + trtmnts
            if str(trtmnts) in str(input):
                shellcmd_bam = "cp " + str(input.bam) + " " + str(params.oDir) + str(trtmnts) + "/" + str(wildcards.sample) + ".bam"
                shellcmd_bai = "cp " + str(input.bai) + " " + str(params.oDir) + str(trtmnts) + "/" + str(wildcards.sample) + ".bam.bai"
                shell(shellcmd_bam)
                shell(shellcmd_bai)

rule danpos_diff:
    input:
        expand("2_pipeline/04_differential_nucleosome_positioning/{trt}/{trt}_{rep}.bam", trt = TREATMENT, rep = config["replicates"]),
    output:
        "2_pipeline/04_differential_nucleosome_positioning/results/" + config["treat-name"] + "-" + config["control-name"] + ".positions.integrative.xls",
    params:
        inputString = config["treat-name"] + "/:" + config["control-name"] + "/",
        outDir = "results",
        extra= "-m 1 "
            "-c 51137214 "
            "--extend 73 "
            "-a 1 "
            "-z 20 "
            "-jd 100 "
            "-e 1 "
    conda: "4_envs/danpos_v3.1.yaml"
    log:
        "2_pipeline/00_qc/nucleosome_positioning/danpos.log"
    shell:
        """
        cd 2_pipeline/04_differential_nucleosome_positioning/
        python3 ../../{config[danpos-executable]} dpos {params.inputString} -o {params.outDir} {params.extra} > ../../{log}
        """

rule adjust_danpos_results:
    input:
        "2_pipeline/04_differential_nucleosome_positioning/results/" + config["treat-name"] + "-" + config["control-name"] + ".positions.integrative.xls",
    output:
        "2_pipeline/04_differential_nucleosome_positioning/results/adjustedFDR/" + config["treat-name"] + "-" + config["control-name"] + ".positions.FDR_corrected.xls",
    params:
        inDir="2_pipeline/04_differential_nucleosome_positioning/results/",
        outDir="2_pipeline/04_differential_nucleosome_positioning/results/adjustedFDR",
        chromSizes=config["chromSizes"],
        extra="-s " + config["treat-name"] + " -l " + config["control-name"]
    conda: "4_envs/adjustFDR.yaml"
    log:
        "2_pipeline/00_qc/nucleosome_positioning/adjustFDR.log"
    shell:
        """
        Rscript {config[danpos-adjust-script]} -o {params.outDir} -c {params.chromSizes} {params.extra} {params.inDir} > {log}
        """
